// Code Generated by Sidekick is for learning and experimentation purposes only.

import React, { useState } from "react";
import cartProducts from "../../data/cartproducts";
import "./cart.css";

const BlackDustbinIcon = () => (
  <svg
    viewBox="0 0 24 24"
    className="dustbin-icon"
    width="28"
    height="28"
    fill="none"
  >
    <rect x="5" y="8" width="14" height="11" rx="2" fill="#222" />
    <rect x="8.5" y="11" width="2" height="6" rx="1" fill="#fff" />
    <rect x="13.5" y="11" width="2" height="6" rx="1" fill="#fff" />
    <path
      d="M3 8H21"
      stroke="#222"
      strokeWidth="2"
      strokeLinecap="round"
    />
    <path
      d="M8 8V6C8 4.9 8.9 4 10 4H14C15.1 4 16 4.9 16 6V8"
      stroke="#222"
      strokeWidth="2"
      strokeLinejoin="round"
      fill="none"
    />
  </svg>
);

function Cart() {
  const [cartItems, setCartItems] = useState(cartProducts);

  const handleQtyInput = (id, newValue) => {
    const value = Math.max(1, parseInt(newValue) || 1);
    setCartItems(items =>
      items.map(item =>
        item.id === id ? { ...item, quantity: value } : item
      )
    );
  };

  const handleQuantity = (id, diff) => {
    setCartItems(items =>
      items.map(item =>
        item.id === id
          ? { ...item, quantity: Math.max(1, item.quantity + diff) }
          : item
      )
    );
  };

  const handleDelete = id => {
    setCartItems(items => items.filter(item => item.id !== id));
  };

  const subtotal = cartItems.reduce((s, item) => s + item.price * item.quantity, 0);
  const gst = +(subtotal * 0.18).toFixed(2);
  const total = +(subtotal + gst).toFixed(2);

  return (
    <div className="cart-split-container">
      <div className="cart-products-table">
        <h2>Your Cart</h2>
        <table>
          <thead>
            <tr>
              <th>Product</th>
              <th>Quantity</th>
              <th></th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            {cartItems.map(item => (
              <tr key={item.id}>
                <td>
                  <div className="product-cell">
                    <img src={item.image} alt={item.name} className="product-image-large" />
                    <span className="product-name">{item.name}</span>
                  </div>
                </td>
                <td>
                  <div className="qty-control">
                    <button className="qty-btn" onClick={() => handleQuantity(item.id, -1)}>-</button>
                    <span className="qty-number">{item.quantity}</span>
                    <button className="qty-btn" onClick={() => handleQuantity(item.id, 1)}>+</button>
                  </div>
                  {/* Option 2: Input type number (alternative), uncomment to use:
                  <input
                    type="number"
                    min="1"
                    value={item.quantity}
                    className="qty-input"
                    onChange={e => handleQtyInput(item.id, e.target.value)}
                  />
                  */}
                </td>
                <td>${(item.price * item.quantity).toFixed(2)}</td>
                <td>
                  <button className="icon-btn" onClick={() => handleDelete(item.id)}>
                    <BlackDustbinIcon />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <div className="cart-summary">
        <h2>Cart Total</h2>
        <div className="summary-section">
          <div className="summary-row">
            <span>Subtotal</span>
            <span>${subtotal.toFixed(2)}</span>
          </div>
          <div className="summary-row">
            <span>GST (18%)</span>
            <span>${gst.toFixed(2)}</span>
          </div>
          <hr className="summary-divider" />
          <div className="summary-row total">
            <span>Total</span>
            <span>${total.toFixed(2)}</span>
          </div>
        </div>
        <div className="cart-buttons">
          <button className="continue-btn">Continue Shopping</button>
          <button className="checkout-btn">Proceed to Checkout</button>
        </div>
      </div>
    </div>
  );
}

export default Cart;
